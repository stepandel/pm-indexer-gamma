generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

/// Markets table - 1:1 mapping with Polymarket API
model markets {
  // Core identifiers
  id                    String   @id
  question              String
  condition_id          String?  @map("conditionId")
  slug                  String
  resolution_source     String?  @map("resolutionSource")

  // Dates
  end_date              DateTime? @map("endDate") @db.Timestamptz(6)
  start_date            DateTime? @map("startDate") @db.Timestamptz(6)

  // Media
  image                 String?
  icon                  String?
  description           String?

  // API response fields (JSON strings as they come from API)
  outcomes              String   // JSON array: ["Yes", "No"]
  outcome_prices        String   @map("outcomePrices") // JSON array: ["0.891", "0.109"]

  // Financial data (keeping as strings to match API exactly)
  volume                String
  liquidity             String
  volume_num            Float?   @map("volumeNum")
  liquidity_num         Float?   @map("liquidityNum")
  volume_24hr           Float?   @map("volume24hr")
  volume_1wk            Float?   @map("volume1wk")
  volume_1mo            Float?   @map("volume1mo")
  volume_1yr            Float?   @map("volume1yr")
  volume_clob           Float?   @map("volumeClob")
  liquidity_clob        Float?   @map("liquidityClob")
  volume_24hr_clob      Float?   @map("volume24hrClob")
  volume_1wk_clob       Float?   @map("volume1wkClob")
  volume_1mo_clob       Float?   @map("volume1moClob")
  volume_1yr_clob       Float?   @map("volume1yrClob")

  // Status flags
  active                Boolean  @default(true)
  closed                Boolean  @default(false)
  archived              Boolean  @default(false)
  new                   Boolean  @default(false)
  featured              Boolean  @default(false)
  restricted            Boolean  @default(false)
  accepting_orders      Boolean? @map("acceptingOrders")
  neg_risk              Boolean? @map("negRisk")

  // Market maker and addresses
  market_maker_address  String?  @map("marketMakerAddress")
  submitted_by          String?  @map("submittedBy")
  resolved_by           String?  @map("resolvedBy")

  // Grouping
  group_item_title      String?  @map("groupItemTitle")
  group_item_threshold  String?  @map("groupItemThreshold")

  // Trading parameters
  question_id           String?  @map("questionID")
  enable_order_book     Boolean? @map("enableOrderBook")
  order_price_min_tick_size Float? @map("orderPriceMinTickSize")
  order_min_size        Float?   @map("orderMinSize")

  // Date helpers
  end_date_iso          String?  @map("endDateIso")
  start_date_iso        String?  @map("startDateIso")
  has_reviewed_dates    Boolean? @map("hasReviewedDates")

  // CLOB token IDs (JSON array)
  clob_token_ids        String?  @map("clobTokenIds")

  // UMA parameters
  uma_bond              String?  @map("umaBond")
  uma_reward            String?  @map("umaReward")
  custom_liveness       Int?     @map("customLiveness")

  // Neg risk fields
  neg_risk_market_id    String?  @map("negRiskMarketID")
  neg_risk_request_id   String?  @map("negRiskRequestID")

  // Timestamps (from API)
  created_at            DateTime @map("createdAt") @db.Timestamptz(6)
  updated_at            DateTime @map("updatedAt") @db.Timestamptz(6)

  // Internal tracking
  indexed_at            DateTime @default(now()) @db.Timestamptz(6)
  last_updated          DateTime @default(now()) @db.Timestamptz(6)

  // Relations (if you still want to track events separately)
  market_event_id       String?
  market_events         market_events? @relation(fields: [market_event_id], references: [id], onUpdate: NoAction)
  market_tags           market_tags[]

  @@index([market_event_id], map: "idx_markets_market_event_id")
  @@index([active], map: "idx_markets_active")
  @@index([closed], map: "idx_markets_closed")
  @@index([condition_id], map: "idx_markets_condition_id")
  @@index([slug], map: "idx_markets_slug")
  @@schema("public")
}

/// Market events table - keeping for grouping if needed
model market_events {
  id                String              @id
  slug              String              @unique
  title             String
  description       String?
  image             String?
  icon              String?
  active            Boolean             @default(true)
  closed            Boolean             @default(false)
  restricted        Boolean             @default(false)
  volume            String?             @default("0")
  liquidity         String?             @default("0")
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  updated_at        DateTime            @default(now()) @db.Timestamptz(6)
  market_event_tags market_event_tags[]
  markets           markets[]

  @@schema("public")
}

/// Tags for categorization
model tags {
  id                String              @id
  label             String
  slug              String              @unique
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  updated_at        DateTime            @default(now()) @db.Timestamptz(6)
  market_event_tags market_event_tags[]
  market_tags       market_tags[]

  @@schema("public")
}

/// Market to tag relationships
model market_tags {
  market_id  String
  tag_id     String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  markets    markets  @relation(fields: [market_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags       tags     @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([market_id, tag_id])
  @@index([market_id], map: "idx_market_tags_market_id")
  @@index([tag_id], map: "idx_market_tags_tag_id")
  @@schema("public")
}

/// Event to tag relationships
model market_event_tags {
  market_event_id String
  tag_id          String
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  market_events   market_events @relation(fields: [market_event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags            tags          @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([market_event_id, tag_id])
  @@index([market_event_id], map: "idx_market_event_tags_market_event_id")
  @@index([tag_id], map: "idx_market_event_tags_tag_id")
  @@schema("public")
}